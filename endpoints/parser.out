Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> parse_sparql
Rule 1     parse_sparql -> endpoints_list
Rule 2     endpoints_list -> endpoints_list endpoint
Rule 3     endpoints_list -> endpoint
Rule 4     endpoint -> URI predicate_list POINT
Rule 5     predicate_list -> predicate_list predicate
Rule 6     predicate_list -> predicate
Rule 7     predicate -> PRED0
Rule 8     predicate -> PRED1
Rule 9     predicate -> URI

Terminals, with rules where they appear

POINT                : 4
PRED0                : 7
PRED1                : 8
URI                  : 4 9
error                : 

Nonterminals, with rules where they appear

endpoint             : 2 3
endpoints_list       : 1 2
parse_sparql         : 0
predicate            : 5 6
predicate_list       : 4 5

Parsing method: LALR

state 0

    (0) S' -> . parse_sparql
    (1) parse_sparql -> . endpoints_list
    (2) endpoints_list -> . endpoints_list endpoint
    (3) endpoints_list -> . endpoint
    (4) endpoint -> . URI predicate_list POINT

    URI             shift and go to state 2

    endpoints_list                 shift and go to state 4
    endpoint                       shift and go to state 1
    parse_sparql                   shift and go to state 3

state 1

    (3) endpoints_list -> endpoint .

    URI             reduce using rule 3 (endpoints_list -> endpoint .)
    $end            reduce using rule 3 (endpoints_list -> endpoint .)


state 2

    (4) endpoint -> URI . predicate_list POINT
    (5) predicate_list -> . predicate_list predicate
    (6) predicate_list -> . predicate
    (7) predicate -> . PRED0
    (8) predicate -> . PRED1
    (9) predicate -> . URI

    PRED0           shift and go to state 8
    PRED1           shift and go to state 9
    URI             shift and go to state 7

    predicate                      shift and go to state 5
    predicate_list                 shift and go to state 6

state 3

    (0) S' -> parse_sparql .



state 4

    (1) parse_sparql -> endpoints_list .
    (2) endpoints_list -> endpoints_list . endpoint
    (4) endpoint -> . URI predicate_list POINT

    $end            reduce using rule 1 (parse_sparql -> endpoints_list .)
    URI             shift and go to state 2

    endpoint                       shift and go to state 10

state 5

    (6) predicate_list -> predicate .

    POINT           reduce using rule 6 (predicate_list -> predicate .)
    PRED0           reduce using rule 6 (predicate_list -> predicate .)
    PRED1           reduce using rule 6 (predicate_list -> predicate .)
    URI             reduce using rule 6 (predicate_list -> predicate .)


state 6

    (4) endpoint -> URI predicate_list . POINT
    (5) predicate_list -> predicate_list . predicate
    (7) predicate -> . PRED0
    (8) predicate -> . PRED1
    (9) predicate -> . URI

    POINT           shift and go to state 12
    PRED0           shift and go to state 8
    PRED1           shift and go to state 9
    URI             shift and go to state 7

    predicate                      shift and go to state 11

state 7

    (9) predicate -> URI .

    POINT           reduce using rule 9 (predicate -> URI .)
    PRED0           reduce using rule 9 (predicate -> URI .)
    PRED1           reduce using rule 9 (predicate -> URI .)
    URI             reduce using rule 9 (predicate -> URI .)


state 8

    (7) predicate -> PRED0 .

    POINT           reduce using rule 7 (predicate -> PRED0 .)
    PRED0           reduce using rule 7 (predicate -> PRED0 .)
    PRED1           reduce using rule 7 (predicate -> PRED0 .)
    URI             reduce using rule 7 (predicate -> PRED0 .)


state 9

    (8) predicate -> PRED1 .

    POINT           reduce using rule 8 (predicate -> PRED1 .)
    PRED0           reduce using rule 8 (predicate -> PRED1 .)
    PRED1           reduce using rule 8 (predicate -> PRED1 .)
    URI             reduce using rule 8 (predicate -> PRED1 .)


state 10

    (2) endpoints_list -> endpoints_list endpoint .

    URI             reduce using rule 2 (endpoints_list -> endpoints_list endpoint .)
    $end            reduce using rule 2 (endpoints_list -> endpoints_list endpoint .)


state 11

    (5) predicate_list -> predicate_list predicate .

    POINT           reduce using rule 5 (predicate_list -> predicate_list predicate .)
    PRED0           reduce using rule 5 (predicate_list -> predicate_list predicate .)
    PRED1           reduce using rule 5 (predicate_list -> predicate_list predicate .)
    URI             reduce using rule 5 (predicate_list -> predicate_list predicate .)


state 12

    (4) endpoint -> URI predicate_list POINT .

    URI             reduce using rule 4 (endpoint -> URI predicate_list POINT .)
    $end            reduce using rule 4 (endpoint -> URI predicate_list POINT .)

